from pycipher import SimpleSubstitution as SimpleSub
import random
import re
from ngram_score import ngram_score
fitness = ngram_score('quadgrams.txt') # load our quadgram statistics from online source
cipherflag='{HTTYRAHWARUKIETKHHSP}'
ciphertext=''
ciphertext = re.sub('[^A-Z]','',ciphertext.upper())

maxkey = list('ABCDEFGHIJKLMNOPQRSTUVWXYZ')
maxscore = -99e9
parentscore,parentkey = maxscore,maxkey[:]
i = 0
while 1:
    i = i+1
    random.shuffle(parentkey)
    deciphered = SimpleSub(parentkey).decipher(ciphertext)
    parentscore = fitness.score(deciphered)
    count = 0
    while count < 1000:
        a = random.randint(0,25)
        b = random.randint(0,25)
        child = parentkey[:]
        child[a],child[b] = child[b],child[a]
        deciphered = SimpleSub(child).decipher(ciphertext)
        score = fitness.score(deciphered)
        if score > parentscore:
            parentscore = score
            parentkey = child[:]
            count = 0
        count = count+1
    if parentscore>maxscore:
        maxscore,maxkey = parentscore,parentkey[:]
    print ('\nbest score so far:',maxscore,'on iteration',i)
    ss = SimpleSub(maxkey) 
    flag = SimpleSub(maxkey)
    print ('    best key: '+''.join(maxkey))
    print ('    my flag: '+ flag.decipher(cipherflag))
    print ('    plaintext: '+ss.decipher(ciphertext))


